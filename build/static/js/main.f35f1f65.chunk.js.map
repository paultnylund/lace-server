{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderCameraInput","state","support","mediaStream","console","log","getVideoTracks","getConstraints","VIDEO","srcObject","react_default","a","createElement","MEDIA_STREAM","_this2","data","navigator","mediaDevices","getUserMedia","audio","video","width","height","then","result","setState","_this3","className","ref","controls","muted","playsInline","autoPlay","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"yNAoGeA,qBAhGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoCRQ,kBAAoB,WAmClB,OAlCIP,EAAKQ,MAAMC,SAeTT,EAAKQ,MAAME,cACbC,QAAQC,IAAIZ,EAAKQ,MAAME,YAAYG,kBACnCF,QAAQC,IAAIZ,EAAKQ,MAAME,YAAYG,iBAAiBC,gBACpDd,EAAKe,MAAMC,UAAYhB,EAAKQ,MAAME,aAiBpCO,EAAAC,EAAAC,cAAA,UAAKnB,EAAKQ,MAAMC,UAtElBT,EAAKQ,MAAQ,CACXC,QAAS,KACTC,YAAa,MAGfV,EAAKoB,aAAe,KARHpB,mFAWC,IAAAqB,EAAAlB,KACZmB,KAAUC,UAAUC,eAAgBD,UAAUC,aAAaC,cACjEd,QAAQC,IAAIU,GAERA,EACFC,UAAUC,aAAaC,aAAa,CAClCC,OAAO,EACPC,MAAO,CACLC,MAAO,IACPC,OAAQ,OAETC,KAAK,SAACC,GACPpB,QAAQC,IAAImB,GAEZV,EAAKW,SAAS,CACZvB,SAAS,EACTC,YAAaqB,MAIjB5B,KAAK6B,SAAS,CACZvB,QAAS,qFA6CN,IAAAwB,EAAA9B,KACP,OACEc,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACZ/B,KAAKI,oBACNU,EAAAC,EAAAC,cAAA,SACIgB,IAAK,SAACA,GAAD,OAASF,EAAKlB,MAAQoB,GAC3BC,UAAQ,EACRC,OAAK,EACLC,aAAW,EACXC,UAAQ,EACRV,OAAO,MACPD,MAAM,MACNM,UAAU,4BA1FJM,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.f35f1f65.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      support: null,\n      mediaStream: null,\n    };\n\n    this.MEDIA_STREAM = null;\n  }\n\n  componentDidMount() {\n    const data = !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\n    console.log(data);\n\n    if (data) {\n      navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: {\n          width: 608,\n          height: 608,\n        },\n      }).then((result) => {\n        console.log(result);\n\n        this.setState({\n          support: true,\n          mediaStream: result,\n        });\n      });\n    } else {\n      this.setState({\n        support: 'getUserMedia() IS NOT supported by this browser',\n      });\n    }\n  }\n\n  renderCameraInput = () => {\n    if (this.state.support) {\n      // console.log(navigator.mediaDevices.getSupportedConstraints());\n      // navigator.mediaDevices.getUserMedia({\n      //   audio: false,\n      //   video: {\n      //     width: 608,\n      //     height: 608,\n      //   },\n      // }).then((result) => {\n      //   console.log(result);\n      //   this.MEDIA_STREAM = result;\n      //   this.setState({\n      //     mediaStream: result,\n      //   });\n      // });\n      if (this.state.mediaStream) {\n        console.log(this.state.mediaStream.getVideoTracks());\n        console.log(this.state.mediaStream.getVideoTracks().getConstraints);\n        this.VIDEO.srcObject = this.state.mediaStream;\n        // return (\n          // <video\n          //   ref={(ref) => this.VIDEO = ref}\n          //   controls\n          //   muted\n          //   playsInline\n          //   autoPlay\n          //   height=\"608\"\n          //   width=\"608\"\n          //   className=\"video-container\"\n          // />\n        // );\n      }\n    }\n\n    return (\n      <h1>{this.state.support}</h1>\n    )\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.renderCameraInput()}\n        <video\n            ref={(ref) => this.VIDEO = ref}\n            controls\n            muted\n            playsInline\n            autoPlay\n            height=\"608\"\n            width=\"608\"\n            className=\"video-container\"\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}